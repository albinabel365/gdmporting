var gcm =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GCMAdapter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Validate = __webpack_require__(1);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * GCMAdapter class.
 * @file This class mediates communication the between commonUI and GCM.
 *
 * @class GCMAdapter
 */
var GCMAdapter = exports.GCMAdapter = function () {
    function GCMAdapter() {
        _classCallCheck(this, GCMAdapter);

        this.commonuiWindow_ = window;
        this.gameWindow_ = null;
        this.gcmHostName_ = null;
        this.commonui_ = null;
        this.gcmAdapterReady_ = false;

        addEventListener("message", this.gcmPostMessageListener.bind(this), false);
    }

    /**
    * This method is responsible for listening to postMessages from GCM
    * @private
    */


    _createClass(GCMAdapter, [{
        key: "gcmPostMessageListener",
        value: function gcmPostMessageListener(event) {
            if (!this.gcmAdapterReady_ && event.origin == GCMConfig.launcherHostName) {
                // All post messages from launcher.html arrive here
                var data = JSON.parse(event.data);
                var method = data["action"];
                if ("init" === method) {
                    var gcmHostName = data['gcmHostName'];
                    var cuiParams = data["cuiParams"];
                    var device = cuiParams.device;
                    this.gcmHostName_ = gcmHostName;

                    if (device == "desktop") {
                        this.gameWindow_ = window.parent.frames["gameFrame"];
                    } else {
                        this.gameWindow_ = window.parent.parent;
                    }

                    //console.log("this.gameWindow_ "+this.gameWindow_);
                    this.gcmAdapterReady_ = true;
                    commonUI.initGCMV4(this, cuiParams);
                }
            } else if (this.gcmAdapterReady_ && event.origin == this.gcmHostName_) {
                // All GCM post messages arrive here
                var data = JSON.parse(event.data);
                var cuiMethodName = data['action'];
                if (_Validate.Validate.isValidCommonUIMethod(cuiMethodName)) {
                    var cuiMethodParams = null;
                    if (data["params"]) {
                        cuiMethodParams = Object.keys(data["params"]).map(function (e) {
                            return data["params"][e];
                        });
                    }

                    console.log("CUI: Received post message from GCM: action: " + cuiMethodName + ", params: " + cuiMethodParams);

                    if (this.commonui_[cuiMethodName]) {
                        var _commonui_;

                        (_commonui_ = this.commonui_)[cuiMethodName].apply(_commonui_, _toConsumableArray(cuiMethodParams));
                    } else {
                        console.log("GCMAdapter: Failed to call method " + cuiMethodName + ". Its not implemented by commonUI");
                    }
                } else {
                    console.log("GCMAdapter: No permission to execute method " + cuiMethodName);
                }
            }
        }
    }, {
        key: "sendPostMessageToGCM",


        /**
        * This method is responsible for sending postMessages to GCM
        * @private
        */
        value: function sendPostMessageToGCM(gcmMethodName, gcmMethodParams) {

            // Create GCM post message
            var postMessage = this.createGCMPostMessage(gcmMethodName, gcmMethodParams);

            // Send Post Message
            console.log("CUI: Sent post message to GCM: " + postMessage);
            this.gameWindow_.postMessage(postMessage, this.gcmHostName_);
        }
    }, {
        key: "createGCMPostMessage",


        /**
        * Helper method to create a GCM Post Message
        * GCM post message has two parts:
        * 1. action : method name to call on GCM
        * 2. params : parameter list to pass to that method
        * @private
        */
        value: function createGCMPostMessage(gcmMethodName, gcmMethodParams) {
            var messageObject = { 'action': gcmMethodName, 'params': gcmMethodParams };
            return JSON.stringify(messageObject);
        }
    }, {
        key: "registerService",


        // Following GCM methods that are exposed to CUI so that CUI can make javascript calls on them
        // and then they will be converted into post messages to GCM.

        /**
        * The game should call registerService before calling commonUIReady on GCM.
        *
        * @public
        * @function
        * @param {String} serviceType The javacript service object type that GCM can use. Currently GCM only supports 'CCY_FORMAT' type.
        * @param {String} serviceUrl Fully qualified url to the javascript Object which GCM can load for the service type.
        */
        value: function registerService(serviceStr, serviceUrl) {
            this.sendPostMessageToGCM("registerService", arguments);
        }
    }, {
        key: "balancesUpdate",


        /**
        * The game should call this function with a balanceFudge parameter when it
        * wants to hide the winnings, then when the winnings have been revealed
        * in the game, game should call it again without the balanceFudge parameter
        * to display the actual balance.
        * The commonUI is also able to call this function in order to update the balance
        * after a quick deposit.  The commonUI should use the calledFromCommonUI parameter
        * to show that this has happened, and so that GCM will call through to the game with
        * the update balance information.
        * @public
        * @function
        * @param {Object} balances A map of balances with following format:  <br>
        * <code>
        *            {
        *                'CASH': {amount: 1000.00}
        *            }
        * </code>
        *
        * @param {number=} balanceFudge (Optional) the numeric amount to decrement the displayed
        *          balance by until the game play is complete. This will usually be the
        *          game winnings, which have not yet been shown to the player in the
        *          game animation.<br>
        *          If this parameter is not provided, gcm will display the actual balance.
        * @param {boolean=} changedFromCommonUI (Optional) this should be set to true when this function is called
        *          by the commonUI.
        * @return {Object} formattedBalances a balances object containing ccy format objects
        *        for each balance type:
        *            {
        *                'CASH': {display: '£10.00', code:'GBP', value: 10.00 ,
        *              currency_symbol: '£', ccy_thousand_separator: ',', ccy_decimal_separator: '.'}
        *            }
        */
        value: function balancesUpdate(balances, balanceFudge, changedFromCommonUI) {
            this.sendPostMessageToGCM("balancesUpdate", arguments);
        }
    }, {
        key: "commonUIReady",


        /**
        * The commonUI should call this method when it is loaded.<br>
        * The commonUI should pass in an object on which all the commonUI methods can be
        * invoked<br>
        * @public
        * @function
        * @param {Object} commonUI a commonUI object.
        */
        value: function commonUIReady(commonUIForGcm_) {
            // Only GCMAdapter needs reference to commonUI object.
            this.commonui_ = commonUIForGcm_;

            // So we no longer need to send commonUI object to GCM via post-message.
            this.sendPostMessageToGCM("commonUIReady", null);
        }
    }, {
        key: "gameRevealed",


        /**
        * After the commonUI has shown the game it should call this method to say it has
        * done so, so that gcm can ask game ui to enable itself.
        * @public
        * @function
        */
        value: function gameRevealed() {
            this.sendPostMessageToGCM("gameRevealed", arguments);
        }
    }, {
        key: "isGameIdle",


        /**
        * The Common-ui should call isGameIdle() to check what state the same is in.
        * A post msg is sent back to the common-ui gameIdle(bool).
        */
        value: function isGameIdle() {
            this.sendPostMessageToGCM("isGameIdle", arguments);
        }

        /**
        * This method is not implemented in GCM v4. Empty method added here for compatibility with v3 commonUI
        * @private
        */

    }, {
        key: "getGameList",
        value: function getGameList(lang, listName) {
            //Empty method for backwards compatibility to GCM V3 commonUI
        }
    }, {
        key: "resume",


        /**
        * This function is called by commonUI when it's done handling recoverable error.
        * gcm will call game.resume() to resume the game play.
        * @public
        * @function
        * @param {*=} feedback (Optional) The feedback from user for the resumption
        *            of current outstanding notification. The feedback detail depend
        *            on notification type. Notifications expect feedback including:<br>
        *              - SESSION_TIMER <br>
        */
        value: function resume(feedback) {
            this.sendPostMessageToGCM("resume", arguments);
        }
    }, {
        key: "reload",


        /**
        * This method is a called by CommonUI when it wants to reload the page as part of error handling.
        * GCM then sends a post-message to gcm-launcher(which is the main page) to reload itself.
        * @public
        */
        value: function reload() {
            this.sendPostMessageToGCM("reload", null);
        }
    }, {
        key: "redirect",


        /**
        * This method is a called by CommonUI when it wants to redirect the main window to a different page as a result of
        * error handling action(like login_error).
        * GCM then sends a post-message to gcm-launcher(which is the main page) to redirect to the requested page.
        * @public
        * @param {String} redirectUrl The url to redirect current page
        */
        value: function redirect(redirectUrl) {
            this.sendPostMessageToGCM("redirect", arguments);
        }
    }, {
        key: "optionHasChanged",


        /**
        * CommonUI can call this method on gcm to state that an
        * option has changed. There could be UI in both the game and the commonUI to
        * control options such as MUTE and TURBO, also the display option such as
        * show about box or game preferences. and the new value should be reflected
        * in both places
        * @public
        * @function
        * @param {string} optionType one of MUTE, TURBO, ABOUT, HELP, PAYTABLE and GAME_PREFERENCE.
        * @param {string} changedFrom one of COMMONUI, GAME. This tells gcm whether the
        *          option was switched in the game or the commonUI.
        * @param {boolean} newValue the new value of the option.
        */
        value: function optionHasChanged(optionType, changedFrom, newValue) {
            this.sendPostMessageToGCM("optionHasChanged", arguments);
        }
    }, {
        key: "getClientType",


        /**
        * @private
        * This method is not avaiable in GCM V4 which only supports html5 games. Added static method for backwards compatibility.
        */
        value: function getClientType() {
            return "html5";
        }
    }, {
        key: "commonUIResize",


        /**
        * This API can be called by common UI to modify the height and width of common UI iframe.
        * @public
        * @function
        * @param {string} height new height of iframe in any css unit, e.g. '20%',
        *          '20px', '20em' are all valid.
        * @param {string} width (Optional) The new width of iframe, same format as height.
        * @param {string} offsetX Gap between top/bottom and start of the iframe.
        * @param {string} offsetY Gap between sides and start of the iframe.
        * @param {boolean} reAdjust Defaults to true. Only used for desktop games
                   where we need to re-adjust gameIframe based on commonUI size.
        */
        value: function commonUIResize(height, width, offsetX, offsetY, reAdjust) {
            this.sendPostMessageToGCM("commonUIResize", arguments);
        }
    }]);

    return GCMAdapter;
}();

var gcmAdapter = new GCMAdapter();
exports.default = gcmAdapter;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Validation functions for input validation
 */

var gcmLauncherPostMessageMethods = ['getOGSParams', 'loadCommonUI', 'commonUIReady', 'commonUIResize', 'gameRevealed', 'reload', 'redirect', 'showCommonUI', 'hideCommonUI', 'launcherLoaded'];

var gcmPostMessageMethods = ['configure', 'launcherResized', 'registerService', 'commonUIReady', 'commonUIResize', 'gameRevealed', 'optionHasChanged', 'resume', 'reload', 'redirect', 'showCommonUI', 'hideCommonUI', 'isGameIdle', 'balancesUpdate', 'setOGSParams'];

var commonUIPostMessageMethods = ['stakeUpdate', 'paidUpdate', 'balancesUpdate', 'loadProgressUpdate', 'gameReady', 'configReady', 'gameAnimationStart', 'gameAnimationComplete', 'gameIdle', 'handleError', 'handleSessionDurationUpdate', 'regOption', 'optionHasChanged', 'handleSessionStats', 'gameResized', 'gameHasLoadingScreen', 'handleMessageTrigger', 'handleGSTrigger', 'handleFreeRoundsAward', 'handleFreeRoundsInProgress', 'handleFreeRoundsUpdate', 'pollJackpots'];

var Validate = exports.Validate = function () {
    function Validate() {
        _classCallCheck(this, Validate);
    }

    _createClass(Validate, null, [{
        key: 'isBalances',


        /**
         * Check the a balances object is in the correct format
         * @param {Object} balances object.
         * @param {string} fundMode determines whether game is use any other fund mode than cash or freebet.
         * @return {boolean} the result of the check.
         */
        value: function isBalances(balances, fundMode) {
            //return false if it's null object
            if (!balances) return false;

            //balances must include at least a CASH balance
            if (_typeof(balances['CASH']) !== 'object') {
                return false;
            }

            for (var type in balances) {
                if (typeof balances[type]['amount'] !== 'number') {
                    return false;
                }
            }
            if (fundMode && 'FREESPIN' == fundMode) {
                if (_typeof(balances['FREESPIN']) !== 'object') return false;
            } else {
                if (_typeof(balances['FREESPIN']) == 'object') return false;
            }
            return true;
        }
    }, {
        key: 'isErrorInfo',


        /**
         * Check that a errorInfo contains the correct properties.
         * @param {Object} errorInfo an errorInfo object.
         * @return {boolean} the result of the check.
         */
        value: function isErrorInfo(errorInfo) {
            if (!errorInfo) {
                return false;
            }

            return !(typeof errorInfo['errorCode'] == 'undefined' || typeof errorInfo['errorMessage'] == 'undefined');
        }
    }, {
        key: 'isValidCurrencyOps',


        /**
         * Check the a accountInfo ccy params are in the correct format
         * CCY code can be empty.
         *
         * @param {Object} accountInfo object.
         * @return {boolean} the result of the check.
         */
        value: function isValidCurrencyOps(accountInfo) {

            if (!accountInfo) return false;

            var patternSeparator = /^[\D]$/;
            var patternCCY = /^[\D]*$/;

            return patternSeparator.test(accountInfo['ccy_thousand_separator']) && patternSeparator.test(accountInfo['ccy_decimal_separator']) && patternCCY.test(accountInfo['ccy_code']);
        }
    }, {
        key: 'isNumericValue',


        /**
         * Check the input is numeric
         * @param {number} value the number to validate.
         * @return {boolean} the result of the check.
         */
        value: function isNumericValue(value) {
            return typeof value == 'number' && !isNaN(parseFloat(value)) && isFinite(value);
        }
    }, {
        key: 'isIntegerValue',


        /**
         *
         * @param {number} value the number to validate.
         * @return {boolean} the result of the check.
         */
        value: function isIntegerValue(value) {

            return typeof value == 'number' && !isNaN(parseInt(value, 10)) && parseInt(value, 10) == value && isFinite(value);
        }
    }, {
        key: 'isPercentValue',


        /**
         * @param {number} value the percentage value to validate.
         * @return {boolean} the result of the check.
         */
        value: function isPercentValue(value) {

            if (this.isNumericValue(value)) {
                return parseFloat(value) <= 100 && !(parseFloat(value) < 0);
            }
            return false;
        }
    }, {
        key: 'isHeight',


        /**
         * Checks that the input is a valid css height spec.
         * valid units: %,in,cm,mm,em,ex,pt,pc,px
         *
         * @param {string} value the number to validate.
         * @return {boolean} the result of the check.
         */
        value: function isHeight(value) {
            var height = /^\d+(\.\d+)?(%|in|cm|mm|em|ex|pt|pc|px)/;
            return height.test(value);
        }
    }, {
        key: 'isAlphaNumeric',


        /**
         * Checks that this is a string of non zero length with only letters and numbers
         * @param {string} str the value to validate.
         * @return {boolean} the result of the check.
         */
        value: function isAlphaNumeric(str) {
            if (typeof str != 'string') return false;

            return (/^[a-zA-Z0-9]+$/.test(str)
            );
        }
    }, {
        key: 'isValidGameName',


        /**
         * Checks that string is valid game name
         * @param {string} str the value to validate.
         * @return {boolean} the result of the check.
         */
        value: function isValidGameName(str) {
            if (typeof str != 'string') return false;

            return (/^[a-zA-Z0-9\-_]+$/.test(str)
            );
        }
    }, {
        key: 'isValidLanguage',


        /**
         * Checks that string is valid language
         * language can be just a 
         * @param {string} str the value to validate.
         * @return {boolean} the result of the check.
         */
        value: function isValidLanguage(str) {
            if (typeof str != 'string') return false;

            var lang_array = str.split("-");
            var patternLanguage = /^[a-z]{2}$/;

            if (lang_array.length === 1) return patternLanguage.test(lang_array[0]);

            if (lang_array.length === 2) {
                var patternCountry = /^[A-Z]{2}$/;
                return patternLanguage.test(lang_array[0]) && patternCountry.test(lang_array[1]);
            }

            // otherwise
            return false;
        }
    }, {
        key: 'isSingleLetter',


        /**
         * Checks the string is a single letter. Useful for checking channels
         * @param {string} str the value to validate.
         * @return {boolean} the result of the check.
         */
        value: function isSingleLetter(str) {
            return (/^[a-zA-Z]$/.test(str)
            );
        }
    }, {
        key: 'isSingleDigit',


        /**
         * Checks the string is a single digit. Useful for checking channels
         * @param {string} str the value to validate.
         * @return {boolean} the result of the check.
         */
        value: function isSingleDigit(str) {
            return (/^[0-9]$/.test(str)
            );
        }
    }, {
        key: 'isEnumOption',


        /**
         * @param {Object} optionTypes enum of valid options.
         * @param {string} optionType for validation.
         * @return {boolean} the result of the check.
         */
        value: function isEnumOption(optionTypes, optionType) {

            var found = false;
            for (var key in optionTypes) {
                if (optionType === optionTypes[key]) {
                    found = true;
                    break;
                }
            }
            return found;
        }
    }, {
        key: 'isFunction',


        /**
         * @param {Object} callBack function passed through.
         * @return {boolean} the result.
         */
        value: function isFunction(callBack) {
            return typeof callBack === 'function';
        }
    }, {
        key: 'isDefinedAndNotNull',


        /**
         * Helper function to check if a variable is defined, not empty and not null.
         * @param variable
         * @return {boolean} the result.
         */
        value: function isDefinedAndNotNull(inputVariable) {
            if (typeof inputVariable !== "undefined" && inputVariable !== null && inputVariable != "") return true;else return false;
        }
    }, {
        key: 'isElement',


        /**
         * @param {Element} elem value to be validated.
         * @return {boolean} Is the object a DOM element.
         */
        value: function isElement(elem) {
            return Boolean(elem && typeof elem.appendChild === 'function');
        }
    }, {
        key: 'isValidCommonUIMethod',


        /**
         * @param {String} methodName method to validate
         * @return {boolean} Returns true if the method supplied is a valid commonUI method
         */
        value: function isValidCommonUIMethod(methodName) {
            return commonUIPostMessageMethods.indexOf(methodName) != -1;
        }
    }, {
        key: 'isValidGCMMethod',


        /**
         * @param {String} methodName method to validate
         * @return {boolean} Returns true if the method supplied is a valid GCM method
         */
        value: function isValidGCMMethod(methodName) {
            return gcmPostMessageMethods.indexOf(methodName) != -1;
        }
    }, {
        key: 'isValidGCMLauncherMethod',


        /**
         * @param {String} methodName method to validate
         * @return {boolean} Returns true if the method supplied is a valid GCM Launcher method
         */
        value: function isValidGCMLauncherMethod(methodName) {
            return gcmLauncherPostMessageMethods.indexOf(methodName) != -1;
        }
    }, {
        key: 'isValidBoolean',


        /**
         * @param {boolean} boolean input
         * @return {boolean} Returns true if the variable supplied is a valid boolean
         */
        value: function isValidBoolean(booleanVariable) {
            return typeof booleanVariable === "boolean";
        }
    }]);

    return Validate;
}();

/***/ })
/******/ ]);


// WEBPACK FOOTER //
// target/resources/build/js/gcmAdapter.min.js